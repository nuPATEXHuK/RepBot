import config_loader as cl
import bot_funcs as f

import logging
from datetime import datetime
import pytz
import asyncio
from aiogram import Bot, Dispatcher, executor, types

logging.basicConfig(level=logging.INFO)

token = cl.get_token()
bot = Bot(token)
dp = Dispatcher(bot)

errorMessage = "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –æ–± —ç—Ç–æ–º —Å–ª—É—á–∞–µ."
userErrorMessage = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ –õ–°.
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, " + message.from_user.username + ".")

@dp.message_handler(commands=["fight"])
async def fight(message: types.Message):
    if (message.chat.id < 0):
        answer = userErrorMessage
        error = True
        parameter = message.text.replace("/fight", "").replace("@AppleBunBot", "").strip()
        answer = f.fight_with_player(message.from_user.id, parameter, message.chat.id)
        if (answer != ""):
            error = False
        if (error):
            await message.answer(userErrorMessage)
        else:
            await message.answer(answer)

@dp.message_handler(commands=["roulette"])
async def roulette(message: types.Message):
    if (message.chat.id < 0):
        answer = userErrorMessage
        error = True
        parameter = message.text.replace("/roulette", "").replace("@AppleBunBot", "").strip()
        answer = f.roulette(message.from_user.id, message.chat.id, parameter)
        if (answer != ""):
            error = False
        if (error):
            await message.answer(userErrorMessage)
        else:
            await message.answer(answer)

@dp.message_handler(commands=["roll"])
async def roll(message: types.Message):
    await message.answer(f.roll(message.from_user.id, message.chat.id))

@dp.message_handler(commands=["add_free_rep"])
async def add_free_rep_for_user(message: types.Message):
    if (message.chat.id < 0):
        error = True
        parameters = message.text.replace("/add_free_rep", "").replace("@AppleBunBot", "").strip().split(" ")
        if (len(parameters) == 2):
            answer = f.restore_free_rep_for_user(message.from_user.id, parameters[0], message.chat.id, parameters[1])
            error = False
        if (error):
            await message.answer(userErrorMessage)
        else:
            await message.answer(answer)

@dp.message_handler(commands=["top_msg"])
async def top_message(message: types.Message):
    if (message.chat.id < 0):
        count = message.text.replace("/top_msg", "").replace("@AppleBunBot", "").strip().split(" ")
        answer = f.get_top_message(message.from_user.id, message.chat.id, count[0])
        await message.answer(answer)
        await asyncio.sleep(60)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id + 1)
        except:
            await message.answer(errorMessage)

@dp.message_handler(commands=["top_rep"])
async def top_rep(message: types.Message):
    if (message.chat.id < 0):
        count = message.text.replace("/top_rep", "").replace("@AppleBunBot", "").strip().split(" ")
        answer = f.get_top_rep(message.from_user.id, message.chat.id, count[0])
        await message.answer(answer)
        await asyncio.sleep(60)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id + 1)
        except:
            await message.answer(errorMessage)

@dp.message_handler(commands=["top_act"])
async def top_active(message: types.Message):
    if (message.chat.id < 0):
        count = message.text.replace("/top_act", "").replace("@AppleBunBot", "").strip().split(" ")
        answer = f.get_top_active(message.from_user.id, message.chat.id, count[0])
        await message.answer(answer)
        await asyncio.sleep(60)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id + 1)
        except:
            await message.answer(errorMessage)

@dp.message_handler(commands=["top_my"])
async def top_my(message: types.Message):
    if (message.chat.id < 0):
        answer = f.get_my_top(message.from_user.id, message.from_user.username, message.chat.id)
        await message.answer(answer)
        await asyncio.sleep(60)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id + 1)
        except:
            await message.answer(errorMessage)

@dp.message_handler(commands=["stat"])
async def status(message: types.Message):
    if (message.chat.id < 0):
        await message.answer(f.status_by_user(message.from_user.id, message.chat.id))
        await asyncio.sleep(60)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id + 1)
        except:
            await message.answer(errorMessage)

@dp.message_handler(commands=["main_pos"])
async def main_pos(message: types.Message):
    if (message.chat.id < 0):
        await message.answer(f.get_main_pos(message.chat.id))

@dp.message_handler(commands=["main_neg"])
async def main_neg(message: types.Message):
    if (message.chat.id < 0):
        await message.answer(f.get_main_neg(message.chat.id))

@dp.message_handler(commands=["help"])
async def help(message: types.Message):
    if (message.chat.id < 0):
        await message.answer(f.get_help(message.from_user.id, message.chat.id))
        await asyncio.sleep(60)
        try:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id + 1)
        except:
            await message.answer(errorMessage)
    else:
        await message.answer(f.get_help_PM())

@dp.message_handler(commands=["assign_title"])
async def set_title(message: types.Message):
    if (int(message.chat.id) < 0):
        answer = userErrorMessage
        error = True
        parameters = message.text.replace("/assign_title", "").replace("@AppleBunBot", "").strip().split(" ")
        if (len(parameters) >= 2):
                i = 2
                while (i < len(parameters)):
                    parameters[1] += " {}".format(parameters[i])
                    i += 1
                answer = f.set_user_title(message.from_user.id, message.chat.id, parameters)
                if (answer != ""):
                    error = False
        if (error):
            await message.answer(userErrorMessage)
        else:
            await message.answer(answer)

# –ü—Ä–æ—Å–ª—É—à–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
@dp.message_handler(content_types=['text'])
async def message_listener(message: types.Message):
    if (message.chat.id < 0):
        if (message.from_user.id != bot.id):
            f.add_message_stat(message.chat.id, message.from_user.id, message.from_user.username, len(message.text.replace(" ", "")))
        if (message.reply_to_message != None):
            if ((message.text == "+" or message.text == "-") and message.reply_to_message.from_user.id != bot.id):
                answer = f.change_rep(message.chat.id, message.text, message.from_user.id, message.reply_to_message.from_user.id)
                if (answer != ""):
                    await message.answer(answer)
                    await asyncio.sleep(3600)
                    try:
                        await bot.delete_message(message.chat.id, message.message_id + 1)
                    except:
                        await message.answer(errorMessage)

# –§—É–Ω–∫—Ü–∏—è (—à–µ–¥—É–ª–µ—Ä) –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è—Ç—Å—è —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É.
async def scheduler(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        now = datetime.strftime(datetime.now(pytz.timezone('Europe/Moscow')), "%X")
        if (now == "00:00:00"):
            chat_ids = f.get_all_chat_ids()
            if (len(chat_ids) > 0):
                for chat_id in f.get_all_chat_ids():
                    await bot.send_message(chat_id, "–î–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞, –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –¥–Ω—è!")
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id, "–í —ç—Ñ–∏—Ä–µ –ø–µ—Ä–µ–¥–∞—á–∞ üí• \"–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞\" üí•!\n–ò—Ç–∞–∫, –¥–∞–≤–∞–π—Ç–µ –∂–µ —É–∑–Ω–∞–µ–º, –∫—Ç–æ —É –Ω–∞—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å—ã–≥—Ä–∞–ª –≤ —è—â–∏–∫.")
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id, "3 - –∏—â–µ–º —É–ª–∏–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è üîç")
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id, "2 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–≤–æ—Ä–æ—Ç–Ω–∏ üëÄ")
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id, "1 - –æ–±–∑–≤–∞–Ω–∏–µ–º –º–æ—Ä–≥–∏ ‚òéÔ∏è")
                    await asyncio.sleep(1)
                    dead_list = f.get_all_dead(chat_id)
                    if (len(dead_list) > 0):
                        dead_report = ""
                        for dead in dead_list:
                            dead_report += dead + ".\n–ü—Ä–∏—á–∏–Ω–∞ —Å–º–µ—Ä—Ç–∏: " + f.dialogs.get_cause_of_death() + "\n"
                            dead_report += "\n –ü–æ–º—è–Ω–µ–º –ø–∞–≤—à–∏—Ö."
                        await bot.send_message(chat_id, "–ê –≤–æ—Ç –∏ —Å–ø–∏—Å–æ–∫ –º–µ—Ä—Ç–≤–µ—Ü–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∫–æ—Ç–æ—Ä—ã–µ –±—Ä–æ—Å–∏–ª–∏ –≤—ã–∑–æ–≤ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:\n{}".format(dead_report))
                    else:
                        await bot.send_message(chat_id, "–í–æ—Ç —ç—Ç–æ –¥–∞! –ù–∏ –µ–¥–∏–Ω–æ–≥–æ —Ç—Ä—É–ø–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ß—Ç–æ —ç—Ç–æ? –£–¥–∞—á–∞? –ò–ª–∏ –∂–µ —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –æ–ø–∞—Å–Ω–æ–π –∏–≥—Ä–æ–π? üòè")
                    await asyncio.sleep(3)
                    await bot.send_message(chat_id, "–ù–æ —ç—Ç–æ –µ—â—ë –Ω–µ –≤—Å—ë. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫—Ç–æ —É –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è {}, –∞ –∫—Ç–æ {}".format(f.dialogs.get_fight_top(), f.dialogs.get_fight_loser()))
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id, "3 - —Å—á–∏—Ç–∞–µ–º —Ü–∏—Ñ–µ—Ä–∫–∏ —Å —É—Ä–æ–Ω–æ–º üßÆ")
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id, "2 - –∑–∞–≥–ª—è–¥—ã–≤–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∞—Ä–µ–Ω—É —á–∞—Ç–∞ ‚öîÔ∏èüõ°")
                    await asyncio.sleep(1)
                    await bot.send_message(chat_id, "1 - —Å—Ç—Ä–æ–∏–º –Ω–∞ –≥–ª–∞–∑ –≥—Ä–∞—Ñ–∏–∫ –ø–æ–±–µ–¥ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π üìàüìâ")
                    await asyncio.sleep(1)
                    fight_top = f.get_fight_top(chat_id)
                    fight_loser = f.get_fight_loser(chat_id)
                    await bot.send_message(chat_id, "–õ—É—á—à–∏–π –±–æ–µ—Ü:\n{}\n\n–•—É–¥—à–∏–π –±–æ–µ—Ü:\n{}".format(fight_top, fight_loser))
            f.restore_standard_daily_params()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–≤–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —à–µ–¥—É–ª–µ—Ä–∞.
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler(1))
    # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∫–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã (long polling).
    executor.start_polling(dp, skip_updates=True)